<?php


namespace Drupal\apigee_edge_custom_mgmt_api_proxy\Form;


use Drupal\apigee_edge\Entity\Form\DeveloperAppCreateFormForDeveloper;
use Drupal\Core\Ajax\AjaxResponse;
use Drupal\Core\Ajax\MessageCommand;
use Drupal\Core\Ajax\ReplaceCommand;
use Drupal\Core\Form\FormStateInterface;

class MultiOrgDeveloperAppCreateFormForDeveloper extends DeveloperAppCreateFormForDeveloper
{
    public static function appExists(string $name, array $element, FormStateInterface $form_state): bool
    {
        if(!empty($name)) {
            $org = $form_state->getValue("org_selector");
            return parent::appExists("$org:$name", $element, $form_state);
        }
        return false;
    }

    public function apigee_edge_custom_mgmt_api_proxy_filter_products(array &$form, \Drupal\Core\Form\FormStateInterface $form_state)
    {
        $response = new AjaxResponse();
        $response->addCommand(new ReplaceCommand('#apiproducts-based-on-org-selector', $form['api_products']));
        return $response;
    }

    public function validateForm(array &$form, FormStateInterface $form_state)
    {
        $org = $form_state->getValue("org_selector");
        $name = $form_state->getValue("name");
        $form_state->setValue("name", "$org:$name");
        return parent::validateForm($form, $form_state); // TODO: Change the autogenerated stub
    }

    protected function alterFormBeforeApiProductElement(array &$form, FormStateInterface $form_state): void
    {
        parent::alterFormBeforeApiProductElement($form, $form_state); // TODO: Change the autogenerated stub
        $options = self::getOrgs();
        $default_org = $form_state->getValue('org_selector') ?: $options[0];
        $form['org_selector'] = [
            '#type' => 'select',
            '#title' => "Select an Org",
            "#options" => array_combine($options, $options),
            '#default_value' => $default_org,
            '#ajax' => [
                'callback' => '::apigee_edge_custom_mgmt_api_proxy_filter_products',
                'disabe-refocus' => true,
                'event' => 'change',
                'wrapper' => 'apiproducts-based-on-org-selector',
                'progress' => [
                    'type' => 'throbber',
                    'message' => t('Filtering products...'),
                ],
            ],
        ];
        $form['name']['#machine_name']['exists'] = [$this, 'appExists'];
    }

    public static function getOrgs()
    {
        return ['gkoli-demos', 'chhats-apigeex-demo1'];
    }

    protected function alterFormWithApiProductElement(array &$form, FormStateInterface $form_state): void
    {
        parent::alterFormWithApiProductElement($form, $form_state);
        dpm($form['api_products']['#options']);
        $default_org = $form_state->getValue('org_selector') ?: self::getOrgs()[0];
        $form['api_products']['#options'] = array_filter($form['api_products']['#options'], function ($key) use ($default_org) {
            return strpos($key, "$default_org:") === 0;
        }, ARRAY_FILTER_USE_KEY);
        $form['api_products']['#prefix'] = '<div id="apiproducts-based-on-org-selector">';
        $form['api_products']['#suffix'] = '</div>';
    }

}